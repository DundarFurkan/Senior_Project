#include <SoftwareSerial.h>  
#define IP "seniorprojectandroid.tk" //ornek.com þeklinde alan adýnýzý girin
#include "DHT.h"
#define DHTPIN 6 //DHT pinini 2.pine baðladýk
#define DHTTYPE DHT11 //DHT22 kullanacaðýmýzý belirttik 
#define FIS_TYPE float
#define FIS_RESOLUSION 101
#define FIS_MIN -3.4028235E+38
#define FIS_MAX 3.4028235E+38
typedef FIS_TYPE(*_FIS_MF)(FIS_TYPE, FIS_TYPE*);
typedef FIS_TYPE(*_FIS_ARR_OP)(FIS_TYPE, FIS_TYPE);
typedef FIS_TYPE(*_FIS_ARR)(FIS_TYPE*, int, _FIS_ARR_OP);
DHT dht(DHTPIN, DHTTYPE); //DHT sensörü tanýmlýyoruz
String agAdi = "furkan102";                 //Aðýmýzýn adýný buraya yazýyoruz.    
String agSifresi = "12345678";           //Aðýmýzýn þifresini buraya yazýyoruz.
int rxPin = 10;                                               //ESP8266 RX pini
int txPin = 11;   
SoftwareSerial esp(rxPin, txPin);

// Ýnputlar Sayýsý
const int fis_gcI = 2;
// Number of outputs to the fuzzy inference system
const int fis_gcO = 1;
// Number of rules to the fuzzy inference system
const int fis_gcR = 14;

FIS_TYPE g_fisInput[fis_gcI];
FIS_TYPE g_fisOutput[fis_gcO];

void setup() {
dht.begin(); //DHT sensörü baþlattýk
 Serial.begin(9600);  //Seri port ile haberleþmemizi baþlatýyoruz.
  Serial.println("Started");
  esp.begin(115200);                                          //ESP8266 ile seri haberleþmeyi baþlatýyoruz.
  esp.println("AT");                                          //AT komutu ile modül kontrolünü yapýyoruz.
  while(!esp.find("OK")){                                     //Modül hazýr olana kadar bekliyoruz.
    esp.println("AT");
    Serial.println("ESP8266 Bulunamadý.");
  }
  Serial.println("OK Komutu Alýndý");
  esp.println("AT+CWMODE=1");                                 //ESP8266 modülünü client olarak ayarlýyoruz.
  while(!esp.find("OK")){                                     //Ayar yapýlana kadar bekliyoruz.
    esp.println("AT+CWMODE=1");
    Serial.println("Ayar Yapýlýyor....");
  }
  Serial.println("Aga Baglaniliyor...");
  esp.println("AT+CWJAP=\""+agAdi+"\",\""+agSifresi+"\"");    //Aðýmýza baðlanýyoruz.
  while(!esp.find("OK"));                                     //Aða baðlanana kadar bekliyoruz.
  Serial.println("Aga Baglandi.");
  delay(1000);
}

void loop() {
float n = dht.readHumidity(); //DHT den nem deðerini okuyoruz
float s = dht.readTemperature(); //DHT den sýcaklýk deðerini okuyoruz
Serial.print("Hava Sicakligi: "); //Ekrana yazdýrýyoruz.
Serial.println(s); 
Serial.print("Nem Orani: ");
  g_fisInput[0] = s;
  g_fisInput[1] = n;
  g_fisOutput[0] = 0;

  fis_evaluate();
  Serial.println(g_fisOutput[0]);
  Serial.println(n); 
  sicaklik_yolla(n,s); //Sýcaklýk yolla fonksiyonuna deðerleri yoluyoruz.
  
}
void sicaklik_yolla(float n, float s){ 
Serial.println(String("AT+CIPSTART=\"TCP\",\"") + IP + "\",80"); //TCP baðlantýsýný baþlatýyoruz.
delay(2000);
if(Serial.find("Error")){  
Serial.println("AT+CIPSTART Error");
Serial.println("AT+RST");
asm volatile ("  jmp 0"); //Arduino resetlenir
delay(1000);
}
String yollanacakkomut = "GET /public_html/deneme.php?"; //Get methoduyla sitedeki writer.php dosyasýna veri göndereceðiz
yollanacakkomut += "&s="; 
yollanacakkomut += (String(s)); //Stringe dönüþtürüp yolluyoruz
yollanacakkomut += "&n=";
yollanacakkomut += (String(n));
yollanacakkomut += " HTTP/1.1\n";
yollanacakkomut += ("Host: seniorprojectandroid.tk\n"); //alan adinizi girin
yollanacakkomut += ("User-Agent: Arduino\n");
yollanacakkomut += "\r\n\r\n";                                                                                                                        
Serial.print("AT+CIPSEND="); //veri göndermeye baþlýyoruz.                  
Serial.println(yollanacakkomut.length()+2); //gönderilecek veri boyutunu giriyoruz.     
delay(4000);

if(Serial.find(">")){ //> iþareti gelirse veriyi yazýyoruz  
Serial.println("baþarý");                        
Serial.print(yollanacakkomut);
Serial.print("\r\n\r\n");
}
else{
Serial.println("AT+CIPCLOSE");
Serial.println("AT+RST");
Serial.println("anladým");
asm volatile ("  jmp 0"); //veri gönderilmezse arduino resetlenir.
  delay(1000);
}
Serial.println("AT+CIPCLOSE");
//delay(10000);
delay(90000); //Sürekli veri göndermemesi için bir süre bekletiyoruz.
}
FIS_TYPE fis_trimf(FIS_TYPE x, FIS_TYPE* p)
{
    FIS_TYPE a = p[0], b = p[1], c = p[2];
    FIS_TYPE t1 = (x - a) / (b - a);
    FIS_TYPE t2 = (c - x) / (c - b);
    if ((a == b) && (b == c)) return (FIS_TYPE) (x == a);
    if (a == b) return (FIS_TYPE) (t2*(b <= x)*(x <= c));
    if (b == c) return (FIS_TYPE) (t1*(a <= x)*(x <= b));
    t1 = min(t1, t2);
    return (FIS_TYPE) max(t1, 0);
}

FIS_TYPE fis_min(FIS_TYPE a, FIS_TYPE b)
{
    return min(a, b);
}

FIS_TYPE fis_max(FIS_TYPE a, FIS_TYPE b)
{
    return max(a, b);
}

FIS_TYPE fis_array_operation(FIS_TYPE *array, int size, _FIS_ARR_OP pfnOp)
{
    int i;
    FIS_TYPE ret = 0;

    if (size == 0) return ret;
    if (size == 1) return array[0];

    ret = array[0];
    for (i = 1; i < size; i++)
    {
        ret = (*pfnOp)(ret, array[i]);
    }

    return ret;
}


//***********************************************************************
// Data for Fuzzy Inference System                                       
//***********************************************************************
// Pointers to the implementations of member functions
_FIS_MF fis_gMF[] =
{
    fis_trimf
};

// Count of member function for each Input
int fis_gIMFCount[] = { 9, 9 };

// Count of member function for each Output 
int fis_gOMFCount[] = { 9 };

// Coefficients for the Input Member Functions
FIS_TYPE fis_gMFI0Coeff1[] = { 8, 10, 15 };
FIS_TYPE fis_gMFI0Coeff2[] = { 15, 18, 26 };
FIS_TYPE fis_gMFI0Coeff3[] = { 19, 22, 32 };
FIS_TYPE fis_gMFI0Coeff4[] = { 5, 18, 20 };
FIS_TYPE fis_gMFI0Coeff5[] = { 15, 24, 32 };
FIS_TYPE fis_gMFI0Coeff6[] = { 14, 19, 26 };
FIS_TYPE fis_gMFI0Coeff7[] = { 18.0424055512722, 24.0424055512722, 26.0424055512722 };
FIS_TYPE fis_gMFI0Coeff8[] = { -1, 2, 10 };
FIS_TYPE fis_gMFI0Coeff9[] = { 21, 24, 27 };
FIS_TYPE* fis_gMFI0Coeff[] = { fis_gMFI0Coeff1, fis_gMFI0Coeff2, fis_gMFI0Coeff3, fis_gMFI0Coeff4, fis_gMFI0Coeff5, fis_gMFI0Coeff6, fis_gMFI0Coeff7, fis_gMFI0Coeff8, fis_gMFI0Coeff9 };
FIS_TYPE fis_gMFI1Coeff1[] = { 58.6892829606785, 61.6892829606785, 63.6892829606785 };
FIS_TYPE fis_gMFI1Coeff2[] = { 10, 20, 30 };
FIS_TYPE fis_gMFI1Coeff3[] = { 70, 75, 80 };
FIS_TYPE fis_gMFI1Coeff4[] = { 60, 70, 80 };
FIS_TYPE fis_gMFI1Coeff5[] = { 20, 30, 40 };
FIS_TYPE fis_gMFI1Coeff6[] = { 60, 65, 70 };
FIS_TYPE fis_gMFI1Coeff7[] = { 10, 15, 20 };
FIS_TYPE fis_gMFI1Coeff8[] = { 43.9321511179645, 53.9321511179645, 63.9321511179645 };
FIS_TYPE fis_gMFI1Coeff9[] = { 40, 50, 55 };
FIS_TYPE* fis_gMFI1Coeff[] = { fis_gMFI1Coeff1, fis_gMFI1Coeff2, fis_gMFI1Coeff3, fis_gMFI1Coeff4, fis_gMFI1Coeff5, fis_gMFI1Coeff6, fis_gMFI1Coeff7, fis_gMFI1Coeff8, fis_gMFI1Coeff9 };
FIS_TYPE** fis_gMFICoeff[] = { fis_gMFI0Coeff, fis_gMFI1Coeff };

// Coefficients for the Output Member Functions
FIS_TYPE fis_gMFO0Coeff1[] = { 0, 1, 2 };
FIS_TYPE fis_gMFO0Coeff2[] = { 4, 5, 6 };
FIS_TYPE fis_gMFO0Coeff3[] = { 7, 8, 9 };
FIS_TYPE fis_gMFO0Coeff4[] = { 1, 2, 3 };
FIS_TYPE fis_gMFO0Coeff5[] = { 2, 3, 4 };
FIS_TYPE fis_gMFO0Coeff6[] = { 3, 4, 5 };
FIS_TYPE fis_gMFO0Coeff7[] = { 5, 6, 7 };
FIS_TYPE fis_gMFO0Coeff8[] = { 6, 7, 8 };
FIS_TYPE fis_gMFO0Coeff9[] = { 8, 9, 10 };
FIS_TYPE* fis_gMFO0Coeff[] = { fis_gMFO0Coeff1, fis_gMFO0Coeff2, fis_gMFO0Coeff3, fis_gMFO0Coeff4, fis_gMFO0Coeff5, fis_gMFO0Coeff6, fis_gMFO0Coeff7, fis_gMFO0Coeff8, fis_gMFO0Coeff9 };
FIS_TYPE** fis_gMFOCoeff[] = { fis_gMFO0Coeff };

// Input membership function set
int fis_gMFI0[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int fis_gMFI1[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int* fis_gMFI[] = { fis_gMFI0, fis_gMFI1};

// Output membership function set
int fis_gMFO0[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int* fis_gMFO[] = { fis_gMFO0};

// Rule Weights
FIS_TYPE fis_gRWeight[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

// Rule Type
int fis_gRType[] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

// Rule Inputs
int fis_gRI0[] = { 1, 1 };
int fis_gRI1[] = { 2, 2 };
int fis_gRI2[] = { 3, 9 };
int fis_gRI3[] = { 4, 3 };
int fis_gRI4[] = { 5, 4 };
int fis_gRI5[] = { 6, 5 };
int fis_gRI6[] = { 7, 6 };
int fis_gRI7[] = { 8, 7 };
int fis_gRI8[] = { 9, 8 };
int fis_gRI9[] = { 2, 3 };
int fis_gRI10[] = { 4, 2 };
int fis_gRI11[] = { 6, 2 };
int fis_gRI12[] = { 7, 8 };
int fis_gRI13[] = { 3, 6 };
int* fis_gRI[] = { fis_gRI0, fis_gRI1, fis_gRI2, fis_gRI3, fis_gRI4, fis_gRI5, fis_gRI6, fis_gRI7, fis_gRI8, fis_gRI9, fis_gRI10, fis_gRI11, fis_gRI12, fis_gRI13 };

// Rule Outputs
int fis_gRO0[] = { 1 };
int fis_gRO1[] = { 4 };
int fis_gRO2[] = { 9 };
int fis_gRO3[] = { 5 };
int fis_gRO4[] = { 6 };
int fis_gRO5[] = { 2 };
int fis_gRO6[] = { 7 };
int fis_gRO7[] = { 8 };
int fis_gRO8[] = { 3 };
int fis_gRO9[] = { 5 };
int fis_gRO10[] = { 4 };
int fis_gRO11[] = { 4 };
int fis_gRO12[] = { 3 };
int fis_gRO13[] = { 7 };
int* fis_gRO[] = { fis_gRO0, fis_gRO1, fis_gRO2, fis_gRO3, fis_gRO4, fis_gRO5, fis_gRO6, fis_gRO7, fis_gRO8, fis_gRO9, fis_gRO10, fis_gRO11, fis_gRO12, fis_gRO13 };

// Input range Min
FIS_TYPE fis_gIMin[] = { -5, 0 };

// Input range Max
FIS_TYPE fis_gIMax[] = { 50, 100 };

// Output range Min
FIS_TYPE fis_gOMin[] = { 0 };

// Output range Max
FIS_TYPE fis_gOMax[] = { 10 };

//***********************************************************************
// Data dependent support functions for Fuzzy Inference System           
//***********************************************************************
FIS_TYPE fis_MF_out(FIS_TYPE** fuzzyRuleSet, FIS_TYPE x, int o)
{
    FIS_TYPE mfOut;
    int r;

    for (r = 0; r < fis_gcR; ++r)
    {
        int index = fis_gRO[r][o];
        if (index > 0)
        {
            index = index - 1;
            mfOut = (fis_gMF[fis_gMFO[o][index]])(x, fis_gMFOCoeff[o][index]);
        }
        else if (index < 0)
        {
            index = -index - 1;
            mfOut = 1 - (fis_gMF[fis_gMFO[o][index]])(x, fis_gMFOCoeff[o][index]);
        }
        else
        {
            mfOut = 0;
        }

        fuzzyRuleSet[0][r] = fis_min(mfOut, fuzzyRuleSet[1][r]);
    }
    return fis_array_operation(fuzzyRuleSet[0], fis_gcR, fis_max);
}

FIS_TYPE fis_defuzz_centroid(FIS_TYPE** fuzzyRuleSet, int o)
{
    FIS_TYPE step = (fis_gOMax[o] - fis_gOMin[o]) / (FIS_RESOLUSION - 1);
    FIS_TYPE area = 0;
    FIS_TYPE momentum = 0;
    FIS_TYPE dist, slice;
    int i;

    // calculate the area under the curve formed by the MF outputs
    for (i = 0; i < FIS_RESOLUSION; ++i){
        dist = fis_gOMin[o] + (step * i);
        slice = step * fis_MF_out(fuzzyRuleSet, dist, o);
        area += slice;
        momentum += slice*dist;
    }

    return ((area == 0) ? ((fis_gOMax[o] + fis_gOMin[o]) / 2) : (momentum / area));
}

//***********************************************************************
// Fuzzy Inference System                                                
//***********************************************************************
void fis_evaluate()
{
    FIS_TYPE fuzzyInput0[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    FIS_TYPE fuzzyInput1[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    FIS_TYPE* fuzzyInput[fis_gcI] = { fuzzyInput0, fuzzyInput1, };
    FIS_TYPE fuzzyOutput0[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    FIS_TYPE* fuzzyOutput[fis_gcO] = { fuzzyOutput0, };
    FIS_TYPE fuzzyRules[fis_gcR] = { 0 };
    FIS_TYPE fuzzyFires[fis_gcR] = { 0 };
    FIS_TYPE* fuzzyRuleSet[] = { fuzzyRules, fuzzyFires };
    FIS_TYPE sW = 0;

    // Transforming input to fuzzy Input
    int i, j, r, o;
    for (i = 0; i < fis_gcI; ++i)
    {
        for (j = 0; j < fis_gIMFCount[i]; ++j)
        {
            fuzzyInput[i][j] =
                (fis_gMF[fis_gMFI[i][j]])(g_fisInput[i], fis_gMFICoeff[i][j]);
        }
    }

    int index = 0;
    for (r = 0; r < fis_gcR; ++r)
    {
        if (fis_gRType[r] == 1)
        {
            fuzzyFires[r] = FIS_MAX;
            for (i = 0; i < fis_gcI; ++i)
            {
                index = fis_gRI[r][i];
                if (index > 0)
                    fuzzyFires[r] = fis_min(fuzzyFires[r], fuzzyInput[i][index - 1]);
                else if (index < 0)
                    fuzzyFires[r] = fis_min(fuzzyFires[r], 1 - fuzzyInput[i][-index - 1]);
                else
                    fuzzyFires[r] = fis_min(fuzzyFires[r], 1);
            }
        }
        else
        {
            fuzzyFires[r] = FIS_MIN;
            for (i = 0; i < fis_gcI; ++i)
            {
                index = fis_gRI[r][i];
                if (index > 0)
                    fuzzyFires[r] = fis_max(fuzzyFires[r], fuzzyInput[i][index - 1]);
                else if (index < 0)
                    fuzzyFires[r] = fis_max(fuzzyFires[r], 1 - fuzzyInput[i][-index - 1]);
                else
                    fuzzyFires[r] = fis_max(fuzzyFires[r], 0);
            }
        }

        fuzzyFires[r] = fis_gRWeight[r] * fuzzyFires[r];
        sW += fuzzyFires[r];
    }

    if (sW == 0)
    {
        for (o = 0; o < fis_gcO; ++o)
        {
            g_fisOutput[o] = ((fis_gOMax[o] + fis_gOMin[o]) / 2);
        }
    }
    else
    {
        for (o = 0; o < fis_gcO; ++o)
        {
            g_fisOutput[o] = fis_defuzz_centroid(fuzzyRuleSet, o);
        }
    }
}